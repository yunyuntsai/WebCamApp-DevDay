//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace WebCamApp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::WebCamApp.WebCamApp_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::WebCamApp.WebCamApp_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace WebCamApp.WebCamApp_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::WebCamApp.WebCamApp_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::WebCamApp.WebCamApp_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[9];
            _typeNameTable[0] = "FontAwesome.UWP.FontAwesome";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.FontIcon";
            _typeNameTable[2] = "FontAwesome.UWP.FontAwesomeIcon";
            _typeNameTable[3] = "System.Enum";
            _typeNameTable[4] = "System.ValueType";
            _typeNameTable[5] = "Object";
            _typeNameTable[6] = "WebCamApp.MainPage";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.UserControl";

            _typeTable = new global::System.Type[9];
            _typeTable[0] = typeof(global::FontAwesome.UWP.FontAwesome);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.FontIcon);
            _typeTable[2] = typeof(global::FontAwesome.UWP.FontAwesomeIcon);
            _typeTable[3] = typeof(global::System.Enum);
            _typeTable[4] = typeof(global::System.ValueType);
            _typeTable[5] = typeof(global::System.Object);
            _typeTable[6] = typeof(global::WebCamApp.MainPage);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_FontAwesome() { return new global::FontAwesome.UWP.FontAwesome(); }
        private object Activate_6_MainPage() { return new global::WebCamApp.MainPage(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::WebCamApp.WebCamApp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  FontAwesome.UWP.FontAwesome
                userType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.FontIcon"));
                userType.Activator = Activate_0_FontAwesome;
                userType.AddMemberName("Icon");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.FontIcon
                xamlType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  FontAwesome.UWP.FontAwesomeIcon
                userType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::FontAwesome.UWP.FontAwesomeIcon.None);
                userType.AddEnumValue("Glass", global::FontAwesome.UWP.FontAwesomeIcon.Glass);
                userType.AddEnumValue("Music", global::FontAwesome.UWP.FontAwesomeIcon.Music);
                userType.AddEnumValue("Search", global::FontAwesome.UWP.FontAwesomeIcon.Search);
                userType.AddEnumValue("EnvelopeOutline", global::FontAwesome.UWP.FontAwesomeIcon.EnvelopeOutline);
                userType.AddEnumValue("Heart", global::FontAwesome.UWP.FontAwesomeIcon.Heart);
                userType.AddEnumValue("Star", global::FontAwesome.UWP.FontAwesomeIcon.Star);
                userType.AddEnumValue("StarOutline", global::FontAwesome.UWP.FontAwesomeIcon.StarOutline);
                userType.AddEnumValue("User", global::FontAwesome.UWP.FontAwesomeIcon.User);
                userType.AddEnumValue("Film", global::FontAwesome.UWP.FontAwesomeIcon.Film);
                userType.AddEnumValue("ThLarge", global::FontAwesome.UWP.FontAwesomeIcon.ThLarge);
                userType.AddEnumValue("Th", global::FontAwesome.UWP.FontAwesomeIcon.Th);
                userType.AddEnumValue("ThList", global::FontAwesome.UWP.FontAwesomeIcon.ThList);
                userType.AddEnumValue("Check", global::FontAwesome.UWP.FontAwesomeIcon.Check);
                userType.AddEnumValue("Times", global::FontAwesome.UWP.FontAwesomeIcon.Times);
                userType.AddEnumValue("Remove", global::FontAwesome.UWP.FontAwesomeIcon.Remove);
                userType.AddEnumValue("Close", global::FontAwesome.UWP.FontAwesomeIcon.Close);
                userType.AddEnumValue("SearchPlus", global::FontAwesome.UWP.FontAwesomeIcon.SearchPlus);
                userType.AddEnumValue("SearchMinus", global::FontAwesome.UWP.FontAwesomeIcon.SearchMinus);
                userType.AddEnumValue("PowerOff", global::FontAwesome.UWP.FontAwesomeIcon.PowerOff);
                userType.AddEnumValue("Signal", global::FontAwesome.UWP.FontAwesomeIcon.Signal);
                userType.AddEnumValue("Cog", global::FontAwesome.UWP.FontAwesomeIcon.Cog);
                userType.AddEnumValue("Gear", global::FontAwesome.UWP.FontAwesomeIcon.Gear);
                userType.AddEnumValue("TrashOutline", global::FontAwesome.UWP.FontAwesomeIcon.TrashOutline);
                userType.AddEnumValue("Home", global::FontAwesome.UWP.FontAwesomeIcon.Home);
                userType.AddEnumValue("FileOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileOutline);
                userType.AddEnumValue("ClockOutline", global::FontAwesome.UWP.FontAwesomeIcon.ClockOutline);
                userType.AddEnumValue("Road", global::FontAwesome.UWP.FontAwesomeIcon.Road);
                userType.AddEnumValue("Download", global::FontAwesome.UWP.FontAwesomeIcon.Download);
                userType.AddEnumValue("ArrowCircleOutlineDown", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleOutlineDown);
                userType.AddEnumValue("ArrowCircleOutlineUp", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleOutlineUp);
                userType.AddEnumValue("Inbox", global::FontAwesome.UWP.FontAwesomeIcon.Inbox);
                userType.AddEnumValue("PlayCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.PlayCircleOutline);
                userType.AddEnumValue("Repeat", global::FontAwesome.UWP.FontAwesomeIcon.Repeat);
                userType.AddEnumValue("RotateRight", global::FontAwesome.UWP.FontAwesomeIcon.RotateRight);
                userType.AddEnumValue("Refresh", global::FontAwesome.UWP.FontAwesomeIcon.Refresh);
                userType.AddEnumValue("ListAlt", global::FontAwesome.UWP.FontAwesomeIcon.ListAlt);
                userType.AddEnumValue("Lock", global::FontAwesome.UWP.FontAwesomeIcon.Lock);
                userType.AddEnumValue("Flag", global::FontAwesome.UWP.FontAwesomeIcon.Flag);
                userType.AddEnumValue("Headphones", global::FontAwesome.UWP.FontAwesomeIcon.Headphones);
                userType.AddEnumValue("VolumeOff", global::FontAwesome.UWP.FontAwesomeIcon.VolumeOff);
                userType.AddEnumValue("VolumeDown", global::FontAwesome.UWP.FontAwesomeIcon.VolumeDown);
                userType.AddEnumValue("VolumeUp", global::FontAwesome.UWP.FontAwesomeIcon.VolumeUp);
                userType.AddEnumValue("Qrcode", global::FontAwesome.UWP.FontAwesomeIcon.Qrcode);
                userType.AddEnumValue("Barcode", global::FontAwesome.UWP.FontAwesomeIcon.Barcode);
                userType.AddEnumValue("Tag", global::FontAwesome.UWP.FontAwesomeIcon.Tag);
                userType.AddEnumValue("Tags", global::FontAwesome.UWP.FontAwesomeIcon.Tags);
                userType.AddEnumValue("Book", global::FontAwesome.UWP.FontAwesomeIcon.Book);
                userType.AddEnumValue("Bookmark", global::FontAwesome.UWP.FontAwesomeIcon.Bookmark);
                userType.AddEnumValue("Print", global::FontAwesome.UWP.FontAwesomeIcon.Print);
                userType.AddEnumValue("Camera", global::FontAwesome.UWP.FontAwesomeIcon.Camera);
                userType.AddEnumValue("Font", global::FontAwesome.UWP.FontAwesomeIcon.Font);
                userType.AddEnumValue("Bold", global::FontAwesome.UWP.FontAwesomeIcon.Bold);
                userType.AddEnumValue("Italic", global::FontAwesome.UWP.FontAwesomeIcon.Italic);
                userType.AddEnumValue("TextHeight", global::FontAwesome.UWP.FontAwesomeIcon.TextHeight);
                userType.AddEnumValue("TextWidth", global::FontAwesome.UWP.FontAwesomeIcon.TextWidth);
                userType.AddEnumValue("AlignLeft", global::FontAwesome.UWP.FontAwesomeIcon.AlignLeft);
                userType.AddEnumValue("AlignCenter", global::FontAwesome.UWP.FontAwesomeIcon.AlignCenter);
                userType.AddEnumValue("AlignRight", global::FontAwesome.UWP.FontAwesomeIcon.AlignRight);
                userType.AddEnumValue("AlignJustify", global::FontAwesome.UWP.FontAwesomeIcon.AlignJustify);
                userType.AddEnumValue("List", global::FontAwesome.UWP.FontAwesomeIcon.List);
                userType.AddEnumValue("Outdent", global::FontAwesome.UWP.FontAwesomeIcon.Outdent);
                userType.AddEnumValue("Dedent", global::FontAwesome.UWP.FontAwesomeIcon.Dedent);
                userType.AddEnumValue("Indent", global::FontAwesome.UWP.FontAwesomeIcon.Indent);
                userType.AddEnumValue("VideoCamera", global::FontAwesome.UWP.FontAwesomeIcon.VideoCamera);
                userType.AddEnumValue("PictureOutline", global::FontAwesome.UWP.FontAwesomeIcon.PictureOutline);
                userType.AddEnumValue("Photo", global::FontAwesome.UWP.FontAwesomeIcon.Photo);
                userType.AddEnumValue("Image", global::FontAwesome.UWP.FontAwesomeIcon.Image);
                userType.AddEnumValue("Pencil", global::FontAwesome.UWP.FontAwesomeIcon.Pencil);
                userType.AddEnumValue("MapMarker", global::FontAwesome.UWP.FontAwesomeIcon.MapMarker);
                userType.AddEnumValue("Adjust", global::FontAwesome.UWP.FontAwesomeIcon.Adjust);
                userType.AddEnumValue("Tint", global::FontAwesome.UWP.FontAwesomeIcon.Tint);
                userType.AddEnumValue("PencilSquareOutline", global::FontAwesome.UWP.FontAwesomeIcon.PencilSquareOutline);
                userType.AddEnumValue("Edit", global::FontAwesome.UWP.FontAwesomeIcon.Edit);
                userType.AddEnumValue("ShareSquareOutline", global::FontAwesome.UWP.FontAwesomeIcon.ShareSquareOutline);
                userType.AddEnumValue("CheckSquareOutline", global::FontAwesome.UWP.FontAwesomeIcon.CheckSquareOutline);
                userType.AddEnumValue("Arrows", global::FontAwesome.UWP.FontAwesomeIcon.Arrows);
                userType.AddEnumValue("StepBackward", global::FontAwesome.UWP.FontAwesomeIcon.StepBackward);
                userType.AddEnumValue("FastBackward", global::FontAwesome.UWP.FontAwesomeIcon.FastBackward);
                userType.AddEnumValue("Backward", global::FontAwesome.UWP.FontAwesomeIcon.Backward);
                userType.AddEnumValue("Play", global::FontAwesome.UWP.FontAwesomeIcon.Play);
                userType.AddEnumValue("Pause", global::FontAwesome.UWP.FontAwesomeIcon.Pause);
                userType.AddEnumValue("Stop", global::FontAwesome.UWP.FontAwesomeIcon.Stop);
                userType.AddEnumValue("Forward", global::FontAwesome.UWP.FontAwesomeIcon.Forward);
                userType.AddEnumValue("FastForward", global::FontAwesome.UWP.FontAwesomeIcon.FastForward);
                userType.AddEnumValue("StepForward", global::FontAwesome.UWP.FontAwesomeIcon.StepForward);
                userType.AddEnumValue("Eject", global::FontAwesome.UWP.FontAwesomeIcon.Eject);
                userType.AddEnumValue("ChevronLeft", global::FontAwesome.UWP.FontAwesomeIcon.ChevronLeft);
                userType.AddEnumValue("ChevronRight", global::FontAwesome.UWP.FontAwesomeIcon.ChevronRight);
                userType.AddEnumValue("PlusCircle", global::FontAwesome.UWP.FontAwesomeIcon.PlusCircle);
                userType.AddEnumValue("MinusCircle", global::FontAwesome.UWP.FontAwesomeIcon.MinusCircle);
                userType.AddEnumValue("TimesCircle", global::FontAwesome.UWP.FontAwesomeIcon.TimesCircle);
                userType.AddEnumValue("CheckCircle", global::FontAwesome.UWP.FontAwesomeIcon.CheckCircle);
                userType.AddEnumValue("QuestionCircle", global::FontAwesome.UWP.FontAwesomeIcon.QuestionCircle);
                userType.AddEnumValue("InfoCircle", global::FontAwesome.UWP.FontAwesomeIcon.InfoCircle);
                userType.AddEnumValue("Crosshairs", global::FontAwesome.UWP.FontAwesomeIcon.Crosshairs);
                userType.AddEnumValue("TimesCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.TimesCircleOutline);
                userType.AddEnumValue("CheckCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.CheckCircleOutline);
                userType.AddEnumValue("Ban", global::FontAwesome.UWP.FontAwesomeIcon.Ban);
                userType.AddEnumValue("ArrowLeft", global::FontAwesome.UWP.FontAwesomeIcon.ArrowLeft);
                userType.AddEnumValue("ArrowRight", global::FontAwesome.UWP.FontAwesomeIcon.ArrowRight);
                userType.AddEnumValue("ArrowUp", global::FontAwesome.UWP.FontAwesomeIcon.ArrowUp);
                userType.AddEnumValue("ArrowDown", global::FontAwesome.UWP.FontAwesomeIcon.ArrowDown);
                userType.AddEnumValue("Share", global::FontAwesome.UWP.FontAwesomeIcon.Share);
                userType.AddEnumValue("MailForward", global::FontAwesome.UWP.FontAwesomeIcon.MailForward);
                userType.AddEnumValue("Expand", global::FontAwesome.UWP.FontAwesomeIcon.Expand);
                userType.AddEnumValue("Compress", global::FontAwesome.UWP.FontAwesomeIcon.Compress);
                userType.AddEnumValue("Plus", global::FontAwesome.UWP.FontAwesomeIcon.Plus);
                userType.AddEnumValue("Minus", global::FontAwesome.UWP.FontAwesomeIcon.Minus);
                userType.AddEnumValue("Asterisk", global::FontAwesome.UWP.FontAwesomeIcon.Asterisk);
                userType.AddEnumValue("ExclamationCircle", global::FontAwesome.UWP.FontAwesomeIcon.ExclamationCircle);
                userType.AddEnumValue("Gift", global::FontAwesome.UWP.FontAwesomeIcon.Gift);
                userType.AddEnumValue("Leaf", global::FontAwesome.UWP.FontAwesomeIcon.Leaf);
                userType.AddEnumValue("Fire", global::FontAwesome.UWP.FontAwesomeIcon.Fire);
                userType.AddEnumValue("Eye", global::FontAwesome.UWP.FontAwesomeIcon.Eye);
                userType.AddEnumValue("EyeSlash", global::FontAwesome.UWP.FontAwesomeIcon.EyeSlash);
                userType.AddEnumValue("ExclamationTriangle", global::FontAwesome.UWP.FontAwesomeIcon.ExclamationTriangle);
                userType.AddEnumValue("Warning", global::FontAwesome.UWP.FontAwesomeIcon.Warning);
                userType.AddEnumValue("Plane", global::FontAwesome.UWP.FontAwesomeIcon.Plane);
                userType.AddEnumValue("Calendar", global::FontAwesome.UWP.FontAwesomeIcon.Calendar);
                userType.AddEnumValue("Random", global::FontAwesome.UWP.FontAwesomeIcon.Random);
                userType.AddEnumValue("Comment", global::FontAwesome.UWP.FontAwesomeIcon.Comment);
                userType.AddEnumValue("Magnet", global::FontAwesome.UWP.FontAwesomeIcon.Magnet);
                userType.AddEnumValue("ChevronUp", global::FontAwesome.UWP.FontAwesomeIcon.ChevronUp);
                userType.AddEnumValue("ChevronDown", global::FontAwesome.UWP.FontAwesomeIcon.ChevronDown);
                userType.AddEnumValue("Retweet", global::FontAwesome.UWP.FontAwesomeIcon.Retweet);
                userType.AddEnumValue("ShoppingCart", global::FontAwesome.UWP.FontAwesomeIcon.ShoppingCart);
                userType.AddEnumValue("Folder", global::FontAwesome.UWP.FontAwesomeIcon.Folder);
                userType.AddEnumValue("FolderOpen", global::FontAwesome.UWP.FontAwesomeIcon.FolderOpen);
                userType.AddEnumValue("ArrowsV", global::FontAwesome.UWP.FontAwesomeIcon.ArrowsV);
                userType.AddEnumValue("ArrowsH", global::FontAwesome.UWP.FontAwesomeIcon.ArrowsH);
                userType.AddEnumValue("BarChart", global::FontAwesome.UWP.FontAwesomeIcon.BarChart);
                userType.AddEnumValue("BarChartOutline", global::FontAwesome.UWP.FontAwesomeIcon.BarChartOutline);
                userType.AddEnumValue("TwitterSquare", global::FontAwesome.UWP.FontAwesomeIcon.TwitterSquare);
                userType.AddEnumValue("FacebookSquare", global::FontAwesome.UWP.FontAwesomeIcon.FacebookSquare);
                userType.AddEnumValue("CameraRetro", global::FontAwesome.UWP.FontAwesomeIcon.CameraRetro);
                userType.AddEnumValue("Key", global::FontAwesome.UWP.FontAwesomeIcon.Key);
                userType.AddEnumValue("Cogs", global::FontAwesome.UWP.FontAwesomeIcon.Cogs);
                userType.AddEnumValue("Gears", global::FontAwesome.UWP.FontAwesomeIcon.Gears);
                userType.AddEnumValue("Comments", global::FontAwesome.UWP.FontAwesomeIcon.Comments);
                userType.AddEnumValue("ThumbsOutlineUp", global::FontAwesome.UWP.FontAwesomeIcon.ThumbsOutlineUp);
                userType.AddEnumValue("ThumbsOutlineDown", global::FontAwesome.UWP.FontAwesomeIcon.ThumbsOutlineDown);
                userType.AddEnumValue("StarHalf", global::FontAwesome.UWP.FontAwesomeIcon.StarHalf);
                userType.AddEnumValue("HeartOutline", global::FontAwesome.UWP.FontAwesomeIcon.HeartOutline);
                userType.AddEnumValue("SignOut", global::FontAwesome.UWP.FontAwesomeIcon.SignOut);
                userType.AddEnumValue("LinkedinSquare", global::FontAwesome.UWP.FontAwesomeIcon.LinkedinSquare);
                userType.AddEnumValue("ThumbTack", global::FontAwesome.UWP.FontAwesomeIcon.ThumbTack);
                userType.AddEnumValue("ExternalLink", global::FontAwesome.UWP.FontAwesomeIcon.ExternalLink);
                userType.AddEnumValue("SignIn", global::FontAwesome.UWP.FontAwesomeIcon.SignIn);
                userType.AddEnumValue("Trophy", global::FontAwesome.UWP.FontAwesomeIcon.Trophy);
                userType.AddEnumValue("GithubSquare", global::FontAwesome.UWP.FontAwesomeIcon.GithubSquare);
                userType.AddEnumValue("Upload", global::FontAwesome.UWP.FontAwesomeIcon.Upload);
                userType.AddEnumValue("LemonOutline", global::FontAwesome.UWP.FontAwesomeIcon.LemonOutline);
                userType.AddEnumValue("Phone", global::FontAwesome.UWP.FontAwesomeIcon.Phone);
                userType.AddEnumValue("SquareOutline", global::FontAwesome.UWP.FontAwesomeIcon.SquareOutline);
                userType.AddEnumValue("BookmarkOutline", global::FontAwesome.UWP.FontAwesomeIcon.BookmarkOutline);
                userType.AddEnumValue("PhoneSquare", global::FontAwesome.UWP.FontAwesomeIcon.PhoneSquare);
                userType.AddEnumValue("Twitter", global::FontAwesome.UWP.FontAwesomeIcon.Twitter);
                userType.AddEnumValue("Facebook", global::FontAwesome.UWP.FontAwesomeIcon.Facebook);
                userType.AddEnumValue("FacebookF", global::FontAwesome.UWP.FontAwesomeIcon.FacebookF);
                userType.AddEnumValue("Github", global::FontAwesome.UWP.FontAwesomeIcon.Github);
                userType.AddEnumValue("Unlock", global::FontAwesome.UWP.FontAwesomeIcon.Unlock);
                userType.AddEnumValue("CreditCard", global::FontAwesome.UWP.FontAwesomeIcon.CreditCard);
                userType.AddEnumValue("Rss", global::FontAwesome.UWP.FontAwesomeIcon.Rss);
                userType.AddEnumValue("Feed", global::FontAwesome.UWP.FontAwesomeIcon.Feed);
                userType.AddEnumValue("HddOutline", global::FontAwesome.UWP.FontAwesomeIcon.HddOutline);
                userType.AddEnumValue("Bullhorn", global::FontAwesome.UWP.FontAwesomeIcon.Bullhorn);
                userType.AddEnumValue("BellOutline", global::FontAwesome.UWP.FontAwesomeIcon.BellOutline);
                userType.AddEnumValue("Certificate", global::FontAwesome.UWP.FontAwesomeIcon.Certificate);
                userType.AddEnumValue("HandOutlineRight", global::FontAwesome.UWP.FontAwesomeIcon.HandOutlineRight);
                userType.AddEnumValue("HandOutlineLeft", global::FontAwesome.UWP.FontAwesomeIcon.HandOutlineLeft);
                userType.AddEnumValue("HandOutlineUp", global::FontAwesome.UWP.FontAwesomeIcon.HandOutlineUp);
                userType.AddEnumValue("HandOutlineDown", global::FontAwesome.UWP.FontAwesomeIcon.HandOutlineDown);
                userType.AddEnumValue("ArrowCircleLeft", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleLeft);
                userType.AddEnumValue("ArrowCircleRight", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleRight);
                userType.AddEnumValue("ArrowCircleUp", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleUp);
                userType.AddEnumValue("ArrowCircleDown", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleDown);
                userType.AddEnumValue("Globe", global::FontAwesome.UWP.FontAwesomeIcon.Globe);
                userType.AddEnumValue("Wrench", global::FontAwesome.UWP.FontAwesomeIcon.Wrench);
                userType.AddEnumValue("Tasks", global::FontAwesome.UWP.FontAwesomeIcon.Tasks);
                userType.AddEnumValue("Filter", global::FontAwesome.UWP.FontAwesomeIcon.Filter);
                userType.AddEnumValue("Briefcase", global::FontAwesome.UWP.FontAwesomeIcon.Briefcase);
                userType.AddEnumValue("ArrowsAlt", global::FontAwesome.UWP.FontAwesomeIcon.ArrowsAlt);
                userType.AddEnumValue("Users", global::FontAwesome.UWP.FontAwesomeIcon.Users);
                userType.AddEnumValue("Group", global::FontAwesome.UWP.FontAwesomeIcon.Group);
                userType.AddEnumValue("Link", global::FontAwesome.UWP.FontAwesomeIcon.Link);
                userType.AddEnumValue("Chain", global::FontAwesome.UWP.FontAwesomeIcon.Chain);
                userType.AddEnumValue("Cloud", global::FontAwesome.UWP.FontAwesomeIcon.Cloud);
                userType.AddEnumValue("Flask", global::FontAwesome.UWP.FontAwesomeIcon.Flask);
                userType.AddEnumValue("Scissors", global::FontAwesome.UWP.FontAwesomeIcon.Scissors);
                userType.AddEnumValue("Cut", global::FontAwesome.UWP.FontAwesomeIcon.Cut);
                userType.AddEnumValue("FilesOutline", global::FontAwesome.UWP.FontAwesomeIcon.FilesOutline);
                userType.AddEnumValue("Copy", global::FontAwesome.UWP.FontAwesomeIcon.Copy);
                userType.AddEnumValue("Paperclip", global::FontAwesome.UWP.FontAwesomeIcon.Paperclip);
                userType.AddEnumValue("FloppyOutline", global::FontAwesome.UWP.FontAwesomeIcon.FloppyOutline);
                userType.AddEnumValue("Save", global::FontAwesome.UWP.FontAwesomeIcon.Save);
                userType.AddEnumValue("Square", global::FontAwesome.UWP.FontAwesomeIcon.Square);
                userType.AddEnumValue("Bars", global::FontAwesome.UWP.FontAwesomeIcon.Bars);
                userType.AddEnumValue("Navicon", global::FontAwesome.UWP.FontAwesomeIcon.Navicon);
                userType.AddEnumValue("Reorder", global::FontAwesome.UWP.FontAwesomeIcon.Reorder);
                userType.AddEnumValue("ListUl", global::FontAwesome.UWP.FontAwesomeIcon.ListUl);
                userType.AddEnumValue("ListOl", global::FontAwesome.UWP.FontAwesomeIcon.ListOl);
                userType.AddEnumValue("Strikethrough", global::FontAwesome.UWP.FontAwesomeIcon.Strikethrough);
                userType.AddEnumValue("Underline", global::FontAwesome.UWP.FontAwesomeIcon.Underline);
                userType.AddEnumValue("Table", global::FontAwesome.UWP.FontAwesomeIcon.Table);
                userType.AddEnumValue("Magic", global::FontAwesome.UWP.FontAwesomeIcon.Magic);
                userType.AddEnumValue("Truck", global::FontAwesome.UWP.FontAwesomeIcon.Truck);
                userType.AddEnumValue("Pinterest", global::FontAwesome.UWP.FontAwesomeIcon.Pinterest);
                userType.AddEnumValue("PinterestSquare", global::FontAwesome.UWP.FontAwesomeIcon.PinterestSquare);
                userType.AddEnumValue("GooglePlusSquare", global::FontAwesome.UWP.FontAwesomeIcon.GooglePlusSquare);
                userType.AddEnumValue("GooglePlus", global::FontAwesome.UWP.FontAwesomeIcon.GooglePlus);
                userType.AddEnumValue("Money", global::FontAwesome.UWP.FontAwesomeIcon.Money);
                userType.AddEnumValue("CaretDown", global::FontAwesome.UWP.FontAwesomeIcon.CaretDown);
                userType.AddEnumValue("CaretUp", global::FontAwesome.UWP.FontAwesomeIcon.CaretUp);
                userType.AddEnumValue("CaretLeft", global::FontAwesome.UWP.FontAwesomeIcon.CaretLeft);
                userType.AddEnumValue("CaretRight", global::FontAwesome.UWP.FontAwesomeIcon.CaretRight);
                userType.AddEnumValue("Columns", global::FontAwesome.UWP.FontAwesomeIcon.Columns);
                userType.AddEnumValue("Sort", global::FontAwesome.UWP.FontAwesomeIcon.Sort);
                userType.AddEnumValue("Unsorted", global::FontAwesome.UWP.FontAwesomeIcon.Unsorted);
                userType.AddEnumValue("SortDesc", global::FontAwesome.UWP.FontAwesomeIcon.SortDesc);
                userType.AddEnumValue("SortDown", global::FontAwesome.UWP.FontAwesomeIcon.SortDown);
                userType.AddEnumValue("SortAsc", global::FontAwesome.UWP.FontAwesomeIcon.SortAsc);
                userType.AddEnumValue("SortUp", global::FontAwesome.UWP.FontAwesomeIcon.SortUp);
                userType.AddEnumValue("Envelope", global::FontAwesome.UWP.FontAwesomeIcon.Envelope);
                userType.AddEnumValue("Linkedin", global::FontAwesome.UWP.FontAwesomeIcon.Linkedin);
                userType.AddEnumValue("Undo", global::FontAwesome.UWP.FontAwesomeIcon.Undo);
                userType.AddEnumValue("RotateLeft", global::FontAwesome.UWP.FontAwesomeIcon.RotateLeft);
                userType.AddEnumValue("Gavel", global::FontAwesome.UWP.FontAwesomeIcon.Gavel);
                userType.AddEnumValue("Legal", global::FontAwesome.UWP.FontAwesomeIcon.Legal);
                userType.AddEnumValue("Tachometer", global::FontAwesome.UWP.FontAwesomeIcon.Tachometer);
                userType.AddEnumValue("Dashboard", global::FontAwesome.UWP.FontAwesomeIcon.Dashboard);
                userType.AddEnumValue("CommentOutline", global::FontAwesome.UWP.FontAwesomeIcon.CommentOutline);
                userType.AddEnumValue("CommentsOutline", global::FontAwesome.UWP.FontAwesomeIcon.CommentsOutline);
                userType.AddEnumValue("Bolt", global::FontAwesome.UWP.FontAwesomeIcon.Bolt);
                userType.AddEnumValue("Flash", global::FontAwesome.UWP.FontAwesomeIcon.Flash);
                userType.AddEnumValue("Sitemap", global::FontAwesome.UWP.FontAwesomeIcon.Sitemap);
                userType.AddEnumValue("Umbrella", global::FontAwesome.UWP.FontAwesomeIcon.Umbrella);
                userType.AddEnumValue("Clipboard", global::FontAwesome.UWP.FontAwesomeIcon.Clipboard);
                userType.AddEnumValue("Paste", global::FontAwesome.UWP.FontAwesomeIcon.Paste);
                userType.AddEnumValue("LightbulbOutline", global::FontAwesome.UWP.FontAwesomeIcon.LightbulbOutline);
                userType.AddEnumValue("Exchange", global::FontAwesome.UWP.FontAwesomeIcon.Exchange);
                userType.AddEnumValue("CloudDownload", global::FontAwesome.UWP.FontAwesomeIcon.CloudDownload);
                userType.AddEnumValue("CloudUpload", global::FontAwesome.UWP.FontAwesomeIcon.CloudUpload);
                userType.AddEnumValue("UserMd", global::FontAwesome.UWP.FontAwesomeIcon.UserMd);
                userType.AddEnumValue("Stethoscope", global::FontAwesome.UWP.FontAwesomeIcon.Stethoscope);
                userType.AddEnumValue("Suitcase", global::FontAwesome.UWP.FontAwesomeIcon.Suitcase);
                userType.AddEnumValue("Bell", global::FontAwesome.UWP.FontAwesomeIcon.Bell);
                userType.AddEnumValue("Coffee", global::FontAwesome.UWP.FontAwesomeIcon.Coffee);
                userType.AddEnumValue("Cutlery", global::FontAwesome.UWP.FontAwesomeIcon.Cutlery);
                userType.AddEnumValue("FileTextOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileTextOutline);
                userType.AddEnumValue("BuildingOutline", global::FontAwesome.UWP.FontAwesomeIcon.BuildingOutline);
                userType.AddEnumValue("HospitalOutline", global::FontAwesome.UWP.FontAwesomeIcon.HospitalOutline);
                userType.AddEnumValue("Ambulance", global::FontAwesome.UWP.FontAwesomeIcon.Ambulance);
                userType.AddEnumValue("Medkit", global::FontAwesome.UWP.FontAwesomeIcon.Medkit);
                userType.AddEnumValue("FighterJet", global::FontAwesome.UWP.FontAwesomeIcon.FighterJet);
                userType.AddEnumValue("Beer", global::FontAwesome.UWP.FontAwesomeIcon.Beer);
                userType.AddEnumValue("HSquare", global::FontAwesome.UWP.FontAwesomeIcon.HSquare);
                userType.AddEnumValue("PlusSquare", global::FontAwesome.UWP.FontAwesomeIcon.PlusSquare);
                userType.AddEnumValue("AngleDoubleLeft", global::FontAwesome.UWP.FontAwesomeIcon.AngleDoubleLeft);
                userType.AddEnumValue("AngleDoubleRight", global::FontAwesome.UWP.FontAwesomeIcon.AngleDoubleRight);
                userType.AddEnumValue("AngleDoubleUp", global::FontAwesome.UWP.FontAwesomeIcon.AngleDoubleUp);
                userType.AddEnumValue("AngleDoubleDown", global::FontAwesome.UWP.FontAwesomeIcon.AngleDoubleDown);
                userType.AddEnumValue("AngleLeft", global::FontAwesome.UWP.FontAwesomeIcon.AngleLeft);
                userType.AddEnumValue("AngleRight", global::FontAwesome.UWP.FontAwesomeIcon.AngleRight);
                userType.AddEnumValue("AngleUp", global::FontAwesome.UWP.FontAwesomeIcon.AngleUp);
                userType.AddEnumValue("AngleDown", global::FontAwesome.UWP.FontAwesomeIcon.AngleDown);
                userType.AddEnumValue("Desktop", global::FontAwesome.UWP.FontAwesomeIcon.Desktop);
                userType.AddEnumValue("Laptop", global::FontAwesome.UWP.FontAwesomeIcon.Laptop);
                userType.AddEnumValue("Tablet", global::FontAwesome.UWP.FontAwesomeIcon.Tablet);
                userType.AddEnumValue("Mobile", global::FontAwesome.UWP.FontAwesomeIcon.Mobile);
                userType.AddEnumValue("MobilePhone", global::FontAwesome.UWP.FontAwesomeIcon.MobilePhone);
                userType.AddEnumValue("CircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.CircleOutline);
                userType.AddEnumValue("QuoteLeft", global::FontAwesome.UWP.FontAwesomeIcon.QuoteLeft);
                userType.AddEnumValue("QuoteRight", global::FontAwesome.UWP.FontAwesomeIcon.QuoteRight);
                userType.AddEnumValue("Spinner", global::FontAwesome.UWP.FontAwesomeIcon.Spinner);
                userType.AddEnumValue("Circle", global::FontAwesome.UWP.FontAwesomeIcon.Circle);
                userType.AddEnumValue("Reply", global::FontAwesome.UWP.FontAwesomeIcon.Reply);
                userType.AddEnumValue("MailReply", global::FontAwesome.UWP.FontAwesomeIcon.MailReply);
                userType.AddEnumValue("GithubAlt", global::FontAwesome.UWP.FontAwesomeIcon.GithubAlt);
                userType.AddEnumValue("FolderOutline", global::FontAwesome.UWP.FontAwesomeIcon.FolderOutline);
                userType.AddEnumValue("FolderOutlinepenOutline", global::FontAwesome.UWP.FontAwesomeIcon.FolderOutlinepenOutline);
                userType.AddEnumValue("SmileOutline", global::FontAwesome.UWP.FontAwesomeIcon.SmileOutline);
                userType.AddEnumValue("FrownOutline", global::FontAwesome.UWP.FontAwesomeIcon.FrownOutline);
                userType.AddEnumValue("MehOutline", global::FontAwesome.UWP.FontAwesomeIcon.MehOutline);
                userType.AddEnumValue("Gamepad", global::FontAwesome.UWP.FontAwesomeIcon.Gamepad);
                userType.AddEnumValue("KeyboardOutline", global::FontAwesome.UWP.FontAwesomeIcon.KeyboardOutline);
                userType.AddEnumValue("FlagOutline", global::FontAwesome.UWP.FontAwesomeIcon.FlagOutline);
                userType.AddEnumValue("FlagCheckered", global::FontAwesome.UWP.FontAwesomeIcon.FlagCheckered);
                userType.AddEnumValue("Terminal", global::FontAwesome.UWP.FontAwesomeIcon.Terminal);
                userType.AddEnumValue("Code", global::FontAwesome.UWP.FontAwesomeIcon.Code);
                userType.AddEnumValue("ReplyAll", global::FontAwesome.UWP.FontAwesomeIcon.ReplyAll);
                userType.AddEnumValue("MailReplyAll", global::FontAwesome.UWP.FontAwesomeIcon.MailReplyAll);
                userType.AddEnumValue("StarHalfOutline", global::FontAwesome.UWP.FontAwesomeIcon.StarHalfOutline);
                userType.AddEnumValue("StarHalfEmpty", global::FontAwesome.UWP.FontAwesomeIcon.StarHalfEmpty);
                userType.AddEnumValue("StarHalfFull", global::FontAwesome.UWP.FontAwesomeIcon.StarHalfFull);
                userType.AddEnumValue("LocationArrow", global::FontAwesome.UWP.FontAwesomeIcon.LocationArrow);
                userType.AddEnumValue("Crop", global::FontAwesome.UWP.FontAwesomeIcon.Crop);
                userType.AddEnumValue("CodeFork", global::FontAwesome.UWP.FontAwesomeIcon.CodeFork);
                userType.AddEnumValue("ChainBroken", global::FontAwesome.UWP.FontAwesomeIcon.ChainBroken);
                userType.AddEnumValue("Unlink", global::FontAwesome.UWP.FontAwesomeIcon.Unlink);
                userType.AddEnumValue("Question", global::FontAwesome.UWP.FontAwesomeIcon.Question);
                userType.AddEnumValue("Info", global::FontAwesome.UWP.FontAwesomeIcon.Info);
                userType.AddEnumValue("Exclamation", global::FontAwesome.UWP.FontAwesomeIcon.Exclamation);
                userType.AddEnumValue("Superscript", global::FontAwesome.UWP.FontAwesomeIcon.Superscript);
                userType.AddEnumValue("Subscript", global::FontAwesome.UWP.FontAwesomeIcon.Subscript);
                userType.AddEnumValue("Eraser", global::FontAwesome.UWP.FontAwesomeIcon.Eraser);
                userType.AddEnumValue("PuzzlePiece", global::FontAwesome.UWP.FontAwesomeIcon.PuzzlePiece);
                userType.AddEnumValue("Microphone", global::FontAwesome.UWP.FontAwesomeIcon.Microphone);
                userType.AddEnumValue("MicrophoneSlash", global::FontAwesome.UWP.FontAwesomeIcon.MicrophoneSlash);
                userType.AddEnumValue("Shield", global::FontAwesome.UWP.FontAwesomeIcon.Shield);
                userType.AddEnumValue("CalendarOutline", global::FontAwesome.UWP.FontAwesomeIcon.CalendarOutline);
                userType.AddEnumValue("FireExtinguisher", global::FontAwesome.UWP.FontAwesomeIcon.FireExtinguisher);
                userType.AddEnumValue("Rocket", global::FontAwesome.UWP.FontAwesomeIcon.Rocket);
                userType.AddEnumValue("Maxcdn", global::FontAwesome.UWP.FontAwesomeIcon.Maxcdn);
                userType.AddEnumValue("ChevronCircleLeft", global::FontAwesome.UWP.FontAwesomeIcon.ChevronCircleLeft);
                userType.AddEnumValue("ChevronCircleRight", global::FontAwesome.UWP.FontAwesomeIcon.ChevronCircleRight);
                userType.AddEnumValue("ChevronCircleUp", global::FontAwesome.UWP.FontAwesomeIcon.ChevronCircleUp);
                userType.AddEnumValue("ChevronCircleDown", global::FontAwesome.UWP.FontAwesomeIcon.ChevronCircleDown);
                userType.AddEnumValue("Html5", global::FontAwesome.UWP.FontAwesomeIcon.Html5);
                userType.AddEnumValue("Css3", global::FontAwesome.UWP.FontAwesomeIcon.Css3);
                userType.AddEnumValue("Anchor", global::FontAwesome.UWP.FontAwesomeIcon.Anchor);
                userType.AddEnumValue("UnlockAlt", global::FontAwesome.UWP.FontAwesomeIcon.UnlockAlt);
                userType.AddEnumValue("Bullseye", global::FontAwesome.UWP.FontAwesomeIcon.Bullseye);
                userType.AddEnumValue("EllipsisH", global::FontAwesome.UWP.FontAwesomeIcon.EllipsisH);
                userType.AddEnumValue("EllipsisV", global::FontAwesome.UWP.FontAwesomeIcon.EllipsisV);
                userType.AddEnumValue("RssSquare", global::FontAwesome.UWP.FontAwesomeIcon.RssSquare);
                userType.AddEnumValue("PlayCircle", global::FontAwesome.UWP.FontAwesomeIcon.PlayCircle);
                userType.AddEnumValue("Ticket", global::FontAwesome.UWP.FontAwesomeIcon.Ticket);
                userType.AddEnumValue("MinusSquare", global::FontAwesome.UWP.FontAwesomeIcon.MinusSquare);
                userType.AddEnumValue("MinusSquareOutline", global::FontAwesome.UWP.FontAwesomeIcon.MinusSquareOutline);
                userType.AddEnumValue("LevelUp", global::FontAwesome.UWP.FontAwesomeIcon.LevelUp);
                userType.AddEnumValue("LevelDown", global::FontAwesome.UWP.FontAwesomeIcon.LevelDown);
                userType.AddEnumValue("CheckSquare", global::FontAwesome.UWP.FontAwesomeIcon.CheckSquare);
                userType.AddEnumValue("PencilSquare", global::FontAwesome.UWP.FontAwesomeIcon.PencilSquare);
                userType.AddEnumValue("ExternalLinkSquare", global::FontAwesome.UWP.FontAwesomeIcon.ExternalLinkSquare);
                userType.AddEnumValue("ShareSquare", global::FontAwesome.UWP.FontAwesomeIcon.ShareSquare);
                userType.AddEnumValue("Compass", global::FontAwesome.UWP.FontAwesomeIcon.Compass);
                userType.AddEnumValue("CaretSquareOutlineDown", global::FontAwesome.UWP.FontAwesomeIcon.CaretSquareOutlineDown);
                userType.AddEnumValue("ToggleDown", global::FontAwesome.UWP.FontAwesomeIcon.ToggleDown);
                userType.AddEnumValue("CaretSquareOutlineUp", global::FontAwesome.UWP.FontAwesomeIcon.CaretSquareOutlineUp);
                userType.AddEnumValue("ToggleUp", global::FontAwesome.UWP.FontAwesomeIcon.ToggleUp);
                userType.AddEnumValue("CaretSquareOutlineRight", global::FontAwesome.UWP.FontAwesomeIcon.CaretSquareOutlineRight);
                userType.AddEnumValue("ToggleRight", global::FontAwesome.UWP.FontAwesomeIcon.ToggleRight);
                userType.AddEnumValue("Eur", global::FontAwesome.UWP.FontAwesomeIcon.Eur);
                userType.AddEnumValue("Euro", global::FontAwesome.UWP.FontAwesomeIcon.Euro);
                userType.AddEnumValue("Gbp", global::FontAwesome.UWP.FontAwesomeIcon.Gbp);
                userType.AddEnumValue("Usd", global::FontAwesome.UWP.FontAwesomeIcon.Usd);
                userType.AddEnumValue("Dollar", global::FontAwesome.UWP.FontAwesomeIcon.Dollar);
                userType.AddEnumValue("Inr", global::FontAwesome.UWP.FontAwesomeIcon.Inr);
                userType.AddEnumValue("Rupee", global::FontAwesome.UWP.FontAwesomeIcon.Rupee);
                userType.AddEnumValue("Jpy", global::FontAwesome.UWP.FontAwesomeIcon.Jpy);
                userType.AddEnumValue("Cny", global::FontAwesome.UWP.FontAwesomeIcon.Cny);
                userType.AddEnumValue("Rmb", global::FontAwesome.UWP.FontAwesomeIcon.Rmb);
                userType.AddEnumValue("Yen", global::FontAwesome.UWP.FontAwesomeIcon.Yen);
                userType.AddEnumValue("Rub", global::FontAwesome.UWP.FontAwesomeIcon.Rub);
                userType.AddEnumValue("Ruble", global::FontAwesome.UWP.FontAwesomeIcon.Ruble);
                userType.AddEnumValue("Rouble", global::FontAwesome.UWP.FontAwesomeIcon.Rouble);
                userType.AddEnumValue("Krw", global::FontAwesome.UWP.FontAwesomeIcon.Krw);
                userType.AddEnumValue("Won", global::FontAwesome.UWP.FontAwesomeIcon.Won);
                userType.AddEnumValue("Btc", global::FontAwesome.UWP.FontAwesomeIcon.Btc);
                userType.AddEnumValue("Bitcoin", global::FontAwesome.UWP.FontAwesomeIcon.Bitcoin);
                userType.AddEnumValue("File", global::FontAwesome.UWP.FontAwesomeIcon.File);
                userType.AddEnumValue("FileText", global::FontAwesome.UWP.FontAwesomeIcon.FileText);
                userType.AddEnumValue("SortAlphaAsc", global::FontAwesome.UWP.FontAwesomeIcon.SortAlphaAsc);
                userType.AddEnumValue("SortAlphaDesc", global::FontAwesome.UWP.FontAwesomeIcon.SortAlphaDesc);
                userType.AddEnumValue("SortAmountAsc", global::FontAwesome.UWP.FontAwesomeIcon.SortAmountAsc);
                userType.AddEnumValue("SortAmountDesc", global::FontAwesome.UWP.FontAwesomeIcon.SortAmountDesc);
                userType.AddEnumValue("SortNumericAsc", global::FontAwesome.UWP.FontAwesomeIcon.SortNumericAsc);
                userType.AddEnumValue("SortNumericDesc", global::FontAwesome.UWP.FontAwesomeIcon.SortNumericDesc);
                userType.AddEnumValue("ThumbsUp", global::FontAwesome.UWP.FontAwesomeIcon.ThumbsUp);
                userType.AddEnumValue("ThumbsDown", global::FontAwesome.UWP.FontAwesomeIcon.ThumbsDown);
                userType.AddEnumValue("YoutubeSquare", global::FontAwesome.UWP.FontAwesomeIcon.YoutubeSquare);
                userType.AddEnumValue("Youtube", global::FontAwesome.UWP.FontAwesomeIcon.Youtube);
                userType.AddEnumValue("Xing", global::FontAwesome.UWP.FontAwesomeIcon.Xing);
                userType.AddEnumValue("XingSquare", global::FontAwesome.UWP.FontAwesomeIcon.XingSquare);
                userType.AddEnumValue("YoutubePlay", global::FontAwesome.UWP.FontAwesomeIcon.YoutubePlay);
                userType.AddEnumValue("Dropbox", global::FontAwesome.UWP.FontAwesomeIcon.Dropbox);
                userType.AddEnumValue("StackOverflow", global::FontAwesome.UWP.FontAwesomeIcon.StackOverflow);
                userType.AddEnumValue("Instagram", global::FontAwesome.UWP.FontAwesomeIcon.Instagram);
                userType.AddEnumValue("Flickr", global::FontAwesome.UWP.FontAwesomeIcon.Flickr);
                userType.AddEnumValue("Adn", global::FontAwesome.UWP.FontAwesomeIcon.Adn);
                userType.AddEnumValue("Bitbucket", global::FontAwesome.UWP.FontAwesomeIcon.Bitbucket);
                userType.AddEnumValue("BitbucketSquare", global::FontAwesome.UWP.FontAwesomeIcon.BitbucketSquare);
                userType.AddEnumValue("Tumblr", global::FontAwesome.UWP.FontAwesomeIcon.Tumblr);
                userType.AddEnumValue("TumblrSquare", global::FontAwesome.UWP.FontAwesomeIcon.TumblrSquare);
                userType.AddEnumValue("LongArrowDown", global::FontAwesome.UWP.FontAwesomeIcon.LongArrowDown);
                userType.AddEnumValue("LongArrowUp", global::FontAwesome.UWP.FontAwesomeIcon.LongArrowUp);
                userType.AddEnumValue("LongArrowLeft", global::FontAwesome.UWP.FontAwesomeIcon.LongArrowLeft);
                userType.AddEnumValue("LongArrowRight", global::FontAwesome.UWP.FontAwesomeIcon.LongArrowRight);
                userType.AddEnumValue("Apple", global::FontAwesome.UWP.FontAwesomeIcon.Apple);
                userType.AddEnumValue("Windows", global::FontAwesome.UWP.FontAwesomeIcon.Windows);
                userType.AddEnumValue("Android", global::FontAwesome.UWP.FontAwesomeIcon.Android);
                userType.AddEnumValue("Linux", global::FontAwesome.UWP.FontAwesomeIcon.Linux);
                userType.AddEnumValue("Dribbble", global::FontAwesome.UWP.FontAwesomeIcon.Dribbble);
                userType.AddEnumValue("Skype", global::FontAwesome.UWP.FontAwesomeIcon.Skype);
                userType.AddEnumValue("Foursquare", global::FontAwesome.UWP.FontAwesomeIcon.Foursquare);
                userType.AddEnumValue("Trello", global::FontAwesome.UWP.FontAwesomeIcon.Trello);
                userType.AddEnumValue("Female", global::FontAwesome.UWP.FontAwesomeIcon.Female);
                userType.AddEnumValue("Male", global::FontAwesome.UWP.FontAwesomeIcon.Male);
                userType.AddEnumValue("Gratipay", global::FontAwesome.UWP.FontAwesomeIcon.Gratipay);
                userType.AddEnumValue("Gittip", global::FontAwesome.UWP.FontAwesomeIcon.Gittip);
                userType.AddEnumValue("SunOutline", global::FontAwesome.UWP.FontAwesomeIcon.SunOutline);
                userType.AddEnumValue("MoonOutline", global::FontAwesome.UWP.FontAwesomeIcon.MoonOutline);
                userType.AddEnumValue("Archive", global::FontAwesome.UWP.FontAwesomeIcon.Archive);
                userType.AddEnumValue("Bug", global::FontAwesome.UWP.FontAwesomeIcon.Bug);
                userType.AddEnumValue("Vk", global::FontAwesome.UWP.FontAwesomeIcon.Vk);
                userType.AddEnumValue("Weibo", global::FontAwesome.UWP.FontAwesomeIcon.Weibo);
                userType.AddEnumValue("Renren", global::FontAwesome.UWP.FontAwesomeIcon.Renren);
                userType.AddEnumValue("Pagelines", global::FontAwesome.UWP.FontAwesomeIcon.Pagelines);
                userType.AddEnumValue("StackExchange", global::FontAwesome.UWP.FontAwesomeIcon.StackExchange);
                userType.AddEnumValue("ArrowCircleOutlineRight", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleOutlineRight);
                userType.AddEnumValue("ArrowCircleOutlineLeft", global::FontAwesome.UWP.FontAwesomeIcon.ArrowCircleOutlineLeft);
                userType.AddEnumValue("CaretSquareOutlineLeft", global::FontAwesome.UWP.FontAwesomeIcon.CaretSquareOutlineLeft);
                userType.AddEnumValue("ToggleLeft", global::FontAwesome.UWP.FontAwesomeIcon.ToggleLeft);
                userType.AddEnumValue("DotCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.DotCircleOutline);
                userType.AddEnumValue("Wheelchair", global::FontAwesome.UWP.FontAwesomeIcon.Wheelchair);
                userType.AddEnumValue("VimeoSquare", global::FontAwesome.UWP.FontAwesomeIcon.VimeoSquare);
                userType.AddEnumValue("Try", global::FontAwesome.UWP.FontAwesomeIcon.Try);
                userType.AddEnumValue("TurkishLira", global::FontAwesome.UWP.FontAwesomeIcon.TurkishLira);
                userType.AddEnumValue("PlusSquareOutline", global::FontAwesome.UWP.FontAwesomeIcon.PlusSquareOutline);
                userType.AddEnumValue("SpaceShuttle", global::FontAwesome.UWP.FontAwesomeIcon.SpaceShuttle);
                userType.AddEnumValue("Slack", global::FontAwesome.UWP.FontAwesomeIcon.Slack);
                userType.AddEnumValue("EnvelopeSquare", global::FontAwesome.UWP.FontAwesomeIcon.EnvelopeSquare);
                userType.AddEnumValue("Wordpress", global::FontAwesome.UWP.FontAwesomeIcon.Wordpress);
                userType.AddEnumValue("Openid", global::FontAwesome.UWP.FontAwesomeIcon.Openid);
                userType.AddEnumValue("University", global::FontAwesome.UWP.FontAwesomeIcon.University);
                userType.AddEnumValue("Institution", global::FontAwesome.UWP.FontAwesomeIcon.Institution);
                userType.AddEnumValue("Bank", global::FontAwesome.UWP.FontAwesomeIcon.Bank);
                userType.AddEnumValue("GraduationCap", global::FontAwesome.UWP.FontAwesomeIcon.GraduationCap);
                userType.AddEnumValue("MortarBoard", global::FontAwesome.UWP.FontAwesomeIcon.MortarBoard);
                userType.AddEnumValue("Yahoo", global::FontAwesome.UWP.FontAwesomeIcon.Yahoo);
                userType.AddEnumValue("Google", global::FontAwesome.UWP.FontAwesomeIcon.Google);
                userType.AddEnumValue("Reddit", global::FontAwesome.UWP.FontAwesomeIcon.Reddit);
                userType.AddEnumValue("RedditSquare", global::FontAwesome.UWP.FontAwesomeIcon.RedditSquare);
                userType.AddEnumValue("StumbleuponCircle", global::FontAwesome.UWP.FontAwesomeIcon.StumbleuponCircle);
                userType.AddEnumValue("Stumbleupon", global::FontAwesome.UWP.FontAwesomeIcon.Stumbleupon);
                userType.AddEnumValue("Delicious", global::FontAwesome.UWP.FontAwesomeIcon.Delicious);
                userType.AddEnumValue("Digg", global::FontAwesome.UWP.FontAwesomeIcon.Digg);
                userType.AddEnumValue("PiedPiperPp", global::FontAwesome.UWP.FontAwesomeIcon.PiedPiperPp);
                userType.AddEnumValue("PiedPiperAlt", global::FontAwesome.UWP.FontAwesomeIcon.PiedPiperAlt);
                userType.AddEnumValue("Drupal", global::FontAwesome.UWP.FontAwesomeIcon.Drupal);
                userType.AddEnumValue("Joomla", global::FontAwesome.UWP.FontAwesomeIcon.Joomla);
                userType.AddEnumValue("Language", global::FontAwesome.UWP.FontAwesomeIcon.Language);
                userType.AddEnumValue("Fax", global::FontAwesome.UWP.FontAwesomeIcon.Fax);
                userType.AddEnumValue("Building", global::FontAwesome.UWP.FontAwesomeIcon.Building);
                userType.AddEnumValue("Child", global::FontAwesome.UWP.FontAwesomeIcon.Child);
                userType.AddEnumValue("Paw", global::FontAwesome.UWP.FontAwesomeIcon.Paw);
                userType.AddEnumValue("Spoon", global::FontAwesome.UWP.FontAwesomeIcon.Spoon);
                userType.AddEnumValue("Cube", global::FontAwesome.UWP.FontAwesomeIcon.Cube);
                userType.AddEnumValue("Cubes", global::FontAwesome.UWP.FontAwesomeIcon.Cubes);
                userType.AddEnumValue("Behance", global::FontAwesome.UWP.FontAwesomeIcon.Behance);
                userType.AddEnumValue("BehanceSquare", global::FontAwesome.UWP.FontAwesomeIcon.BehanceSquare);
                userType.AddEnumValue("Steam", global::FontAwesome.UWP.FontAwesomeIcon.Steam);
                userType.AddEnumValue("SteamSquare", global::FontAwesome.UWP.FontAwesomeIcon.SteamSquare);
                userType.AddEnumValue("Recycle", global::FontAwesome.UWP.FontAwesomeIcon.Recycle);
                userType.AddEnumValue("Car", global::FontAwesome.UWP.FontAwesomeIcon.Car);
                userType.AddEnumValue("Automobile", global::FontAwesome.UWP.FontAwesomeIcon.Automobile);
                userType.AddEnumValue("Taxi", global::FontAwesome.UWP.FontAwesomeIcon.Taxi);
                userType.AddEnumValue("Cab", global::FontAwesome.UWP.FontAwesomeIcon.Cab);
                userType.AddEnumValue("Tree", global::FontAwesome.UWP.FontAwesomeIcon.Tree);
                userType.AddEnumValue("Spotify", global::FontAwesome.UWP.FontAwesomeIcon.Spotify);
                userType.AddEnumValue("Deviantart", global::FontAwesome.UWP.FontAwesomeIcon.Deviantart);
                userType.AddEnumValue("Soundcloud", global::FontAwesome.UWP.FontAwesomeIcon.Soundcloud);
                userType.AddEnumValue("Database", global::FontAwesome.UWP.FontAwesomeIcon.Database);
                userType.AddEnumValue("FilePdfOutline", global::FontAwesome.UWP.FontAwesomeIcon.FilePdfOutline);
                userType.AddEnumValue("FileWordOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileWordOutline);
                userType.AddEnumValue("FileExcelOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileExcelOutline);
                userType.AddEnumValue("FilePowerpointOutline", global::FontAwesome.UWP.FontAwesomeIcon.FilePowerpointOutline);
                userType.AddEnumValue("FileImageOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileImageOutline);
                userType.AddEnumValue("FilePhotoOutline", global::FontAwesome.UWP.FontAwesomeIcon.FilePhotoOutline);
                userType.AddEnumValue("FilePictureOutline", global::FontAwesome.UWP.FontAwesomeIcon.FilePictureOutline);
                userType.AddEnumValue("FileArchiveOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileArchiveOutline);
                userType.AddEnumValue("FileZipOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileZipOutline);
                userType.AddEnumValue("FileAudioOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileAudioOutline);
                userType.AddEnumValue("FileSoundOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileSoundOutline);
                userType.AddEnumValue("FileVideoOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileVideoOutline);
                userType.AddEnumValue("FileMovieOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileMovieOutline);
                userType.AddEnumValue("FileCodeOutline", global::FontAwesome.UWP.FontAwesomeIcon.FileCodeOutline);
                userType.AddEnumValue("Vine", global::FontAwesome.UWP.FontAwesomeIcon.Vine);
                userType.AddEnumValue("Codepen", global::FontAwesome.UWP.FontAwesomeIcon.Codepen);
                userType.AddEnumValue("Jsfiddle", global::FontAwesome.UWP.FontAwesomeIcon.Jsfiddle);
                userType.AddEnumValue("LifeRing", global::FontAwesome.UWP.FontAwesomeIcon.LifeRing);
                userType.AddEnumValue("LifeBouy", global::FontAwesome.UWP.FontAwesomeIcon.LifeBouy);
                userType.AddEnumValue("LifeBuoy", global::FontAwesome.UWP.FontAwesomeIcon.LifeBuoy);
                userType.AddEnumValue("LifeSaver", global::FontAwesome.UWP.FontAwesomeIcon.LifeSaver);
                userType.AddEnumValue("Support", global::FontAwesome.UWP.FontAwesomeIcon.Support);
                userType.AddEnumValue("CircleOutlineNotch", global::FontAwesome.UWP.FontAwesomeIcon.CircleOutlineNotch);
                userType.AddEnumValue("Rebel", global::FontAwesome.UWP.FontAwesomeIcon.Rebel);
                userType.AddEnumValue("Ra", global::FontAwesome.UWP.FontAwesomeIcon.Ra);
                userType.AddEnumValue("Resistance", global::FontAwesome.UWP.FontAwesomeIcon.Resistance);
                userType.AddEnumValue("Empire", global::FontAwesome.UWP.FontAwesomeIcon.Empire);
                userType.AddEnumValue("Ge", global::FontAwesome.UWP.FontAwesomeIcon.Ge);
                userType.AddEnumValue("GitSquare", global::FontAwesome.UWP.FontAwesomeIcon.GitSquare);
                userType.AddEnumValue("Git", global::FontAwesome.UWP.FontAwesomeIcon.Git);
                userType.AddEnumValue("HackerNews", global::FontAwesome.UWP.FontAwesomeIcon.HackerNews);
                userType.AddEnumValue("YCombinatorSquare", global::FontAwesome.UWP.FontAwesomeIcon.YCombinatorSquare);
                userType.AddEnumValue("YcSquare", global::FontAwesome.UWP.FontAwesomeIcon.YcSquare);
                userType.AddEnumValue("TencentWeibo", global::FontAwesome.UWP.FontAwesomeIcon.TencentWeibo);
                userType.AddEnumValue("Qq", global::FontAwesome.UWP.FontAwesomeIcon.Qq);
                userType.AddEnumValue("Weixin", global::FontAwesome.UWP.FontAwesomeIcon.Weixin);
                userType.AddEnumValue("Wechat", global::FontAwesome.UWP.FontAwesomeIcon.Wechat);
                userType.AddEnumValue("PaperPlane", global::FontAwesome.UWP.FontAwesomeIcon.PaperPlane);
                userType.AddEnumValue("Send", global::FontAwesome.UWP.FontAwesomeIcon.Send);
                userType.AddEnumValue("PaperPlaneOutline", global::FontAwesome.UWP.FontAwesomeIcon.PaperPlaneOutline);
                userType.AddEnumValue("SendOutline", global::FontAwesome.UWP.FontAwesomeIcon.SendOutline);
                userType.AddEnumValue("History", global::FontAwesome.UWP.FontAwesomeIcon.History);
                userType.AddEnumValue("CircleThin", global::FontAwesome.UWP.FontAwesomeIcon.CircleThin);
                userType.AddEnumValue("Header", global::FontAwesome.UWP.FontAwesomeIcon.Header);
                userType.AddEnumValue("Paragraph", global::FontAwesome.UWP.FontAwesomeIcon.Paragraph);
                userType.AddEnumValue("Sliders", global::FontAwesome.UWP.FontAwesomeIcon.Sliders);
                userType.AddEnumValue("ShareAlt", global::FontAwesome.UWP.FontAwesomeIcon.ShareAlt);
                userType.AddEnumValue("ShareAltSquare", global::FontAwesome.UWP.FontAwesomeIcon.ShareAltSquare);
                userType.AddEnumValue("Bomb", global::FontAwesome.UWP.FontAwesomeIcon.Bomb);
                userType.AddEnumValue("FutbolOutline", global::FontAwesome.UWP.FontAwesomeIcon.FutbolOutline);
                userType.AddEnumValue("SoccerBallOutline", global::FontAwesome.UWP.FontAwesomeIcon.SoccerBallOutline);
                userType.AddEnumValue("Tty", global::FontAwesome.UWP.FontAwesomeIcon.Tty);
                userType.AddEnumValue("Binoculars", global::FontAwesome.UWP.FontAwesomeIcon.Binoculars);
                userType.AddEnumValue("Plug", global::FontAwesome.UWP.FontAwesomeIcon.Plug);
                userType.AddEnumValue("Slideshare", global::FontAwesome.UWP.FontAwesomeIcon.Slideshare);
                userType.AddEnumValue("Twitch", global::FontAwesome.UWP.FontAwesomeIcon.Twitch);
                userType.AddEnumValue("Yelp", global::FontAwesome.UWP.FontAwesomeIcon.Yelp);
                userType.AddEnumValue("NewspaperOutline", global::FontAwesome.UWP.FontAwesomeIcon.NewspaperOutline);
                userType.AddEnumValue("Wifi", global::FontAwesome.UWP.FontAwesomeIcon.Wifi);
                userType.AddEnumValue("Calculator", global::FontAwesome.UWP.FontAwesomeIcon.Calculator);
                userType.AddEnumValue("Paypal", global::FontAwesome.UWP.FontAwesomeIcon.Paypal);
                userType.AddEnumValue("GoogleWallet", global::FontAwesome.UWP.FontAwesomeIcon.GoogleWallet);
                userType.AddEnumValue("CcVisa", global::FontAwesome.UWP.FontAwesomeIcon.CcVisa);
                userType.AddEnumValue("CcMastercard", global::FontAwesome.UWP.FontAwesomeIcon.CcMastercard);
                userType.AddEnumValue("CcDiscover", global::FontAwesome.UWP.FontAwesomeIcon.CcDiscover);
                userType.AddEnumValue("CcAmex", global::FontAwesome.UWP.FontAwesomeIcon.CcAmex);
                userType.AddEnumValue("CcPaypal", global::FontAwesome.UWP.FontAwesomeIcon.CcPaypal);
                userType.AddEnumValue("CcStripe", global::FontAwesome.UWP.FontAwesomeIcon.CcStripe);
                userType.AddEnumValue("BellSlash", global::FontAwesome.UWP.FontAwesomeIcon.BellSlash);
                userType.AddEnumValue("BellSlashOutline", global::FontAwesome.UWP.FontAwesomeIcon.BellSlashOutline);
                userType.AddEnumValue("Trash", global::FontAwesome.UWP.FontAwesomeIcon.Trash);
                userType.AddEnumValue("Copyright", global::FontAwesome.UWP.FontAwesomeIcon.Copyright);
                userType.AddEnumValue("At", global::FontAwesome.UWP.FontAwesomeIcon.At);
                userType.AddEnumValue("Eyedropper", global::FontAwesome.UWP.FontAwesomeIcon.Eyedropper);
                userType.AddEnumValue("PaintBrush", global::FontAwesome.UWP.FontAwesomeIcon.PaintBrush);
                userType.AddEnumValue("BirthdayCake", global::FontAwesome.UWP.FontAwesomeIcon.BirthdayCake);
                userType.AddEnumValue("AreaChart", global::FontAwesome.UWP.FontAwesomeIcon.AreaChart);
                userType.AddEnumValue("PieChart", global::FontAwesome.UWP.FontAwesomeIcon.PieChart);
                userType.AddEnumValue("LineChart", global::FontAwesome.UWP.FontAwesomeIcon.LineChart);
                userType.AddEnumValue("Lastfm", global::FontAwesome.UWP.FontAwesomeIcon.Lastfm);
                userType.AddEnumValue("LastfmSquare", global::FontAwesome.UWP.FontAwesomeIcon.LastfmSquare);
                userType.AddEnumValue("ToggleOff", global::FontAwesome.UWP.FontAwesomeIcon.ToggleOff);
                userType.AddEnumValue("ToggleOn", global::FontAwesome.UWP.FontAwesomeIcon.ToggleOn);
                userType.AddEnumValue("Bicycle", global::FontAwesome.UWP.FontAwesomeIcon.Bicycle);
                userType.AddEnumValue("Bus", global::FontAwesome.UWP.FontAwesomeIcon.Bus);
                userType.AddEnumValue("Ioxhost", global::FontAwesome.UWP.FontAwesomeIcon.Ioxhost);
                userType.AddEnumValue("Angellist", global::FontAwesome.UWP.FontAwesomeIcon.Angellist);
                userType.AddEnumValue("Cc", global::FontAwesome.UWP.FontAwesomeIcon.Cc);
                userType.AddEnumValue("Ils", global::FontAwesome.UWP.FontAwesomeIcon.Ils);
                userType.AddEnumValue("Shekel", global::FontAwesome.UWP.FontAwesomeIcon.Shekel);
                userType.AddEnumValue("Sheqel", global::FontAwesome.UWP.FontAwesomeIcon.Sheqel);
                userType.AddEnumValue("Meanpath", global::FontAwesome.UWP.FontAwesomeIcon.Meanpath);
                userType.AddEnumValue("Buysellads", global::FontAwesome.UWP.FontAwesomeIcon.Buysellads);
                userType.AddEnumValue("Connectdevelop", global::FontAwesome.UWP.FontAwesomeIcon.Connectdevelop);
                userType.AddEnumValue("Dashcube", global::FontAwesome.UWP.FontAwesomeIcon.Dashcube);
                userType.AddEnumValue("Forumbee", global::FontAwesome.UWP.FontAwesomeIcon.Forumbee);
                userType.AddEnumValue("Leanpub", global::FontAwesome.UWP.FontAwesomeIcon.Leanpub);
                userType.AddEnumValue("Sellsy", global::FontAwesome.UWP.FontAwesomeIcon.Sellsy);
                userType.AddEnumValue("Shirtsinbulk", global::FontAwesome.UWP.FontAwesomeIcon.Shirtsinbulk);
                userType.AddEnumValue("Simplybuilt", global::FontAwesome.UWP.FontAwesomeIcon.Simplybuilt);
                userType.AddEnumValue("Skyatlas", global::FontAwesome.UWP.FontAwesomeIcon.Skyatlas);
                userType.AddEnumValue("CartPlus", global::FontAwesome.UWP.FontAwesomeIcon.CartPlus);
                userType.AddEnumValue("CartArrowDown", global::FontAwesome.UWP.FontAwesomeIcon.CartArrowDown);
                userType.AddEnumValue("Diamond", global::FontAwesome.UWP.FontAwesomeIcon.Diamond);
                userType.AddEnumValue("Ship", global::FontAwesome.UWP.FontAwesomeIcon.Ship);
                userType.AddEnumValue("UserSecret", global::FontAwesome.UWP.FontAwesomeIcon.UserSecret);
                userType.AddEnumValue("Motorcycle", global::FontAwesome.UWP.FontAwesomeIcon.Motorcycle);
                userType.AddEnumValue("StreetView", global::FontAwesome.UWP.FontAwesomeIcon.StreetView);
                userType.AddEnumValue("Heartbeat", global::FontAwesome.UWP.FontAwesomeIcon.Heartbeat);
                userType.AddEnumValue("Venus", global::FontAwesome.UWP.FontAwesomeIcon.Venus);
                userType.AddEnumValue("Mars", global::FontAwesome.UWP.FontAwesomeIcon.Mars);
                userType.AddEnumValue("Mercury", global::FontAwesome.UWP.FontAwesomeIcon.Mercury);
                userType.AddEnumValue("Transgender", global::FontAwesome.UWP.FontAwesomeIcon.Transgender);
                userType.AddEnumValue("Intersex", global::FontAwesome.UWP.FontAwesomeIcon.Intersex);
                userType.AddEnumValue("TransgenderAlt", global::FontAwesome.UWP.FontAwesomeIcon.TransgenderAlt);
                userType.AddEnumValue("VenusDouble", global::FontAwesome.UWP.FontAwesomeIcon.VenusDouble);
                userType.AddEnumValue("MarsDouble", global::FontAwesome.UWP.FontAwesomeIcon.MarsDouble);
                userType.AddEnumValue("VenusMars", global::FontAwesome.UWP.FontAwesomeIcon.VenusMars);
                userType.AddEnumValue("MarsStroke", global::FontAwesome.UWP.FontAwesomeIcon.MarsStroke);
                userType.AddEnumValue("MarsStrokeV", global::FontAwesome.UWP.FontAwesomeIcon.MarsStrokeV);
                userType.AddEnumValue("MarsStrokeH", global::FontAwesome.UWP.FontAwesomeIcon.MarsStrokeH);
                userType.AddEnumValue("Neuter", global::FontAwesome.UWP.FontAwesomeIcon.Neuter);
                userType.AddEnumValue("Genderless", global::FontAwesome.UWP.FontAwesomeIcon.Genderless);
                userType.AddEnumValue("FacebookOfficial", global::FontAwesome.UWP.FontAwesomeIcon.FacebookOfficial);
                userType.AddEnumValue("PinterestP", global::FontAwesome.UWP.FontAwesomeIcon.PinterestP);
                userType.AddEnumValue("Whatsapp", global::FontAwesome.UWP.FontAwesomeIcon.Whatsapp);
                userType.AddEnumValue("Server", global::FontAwesome.UWP.FontAwesomeIcon.Server);
                userType.AddEnumValue("UserPlus", global::FontAwesome.UWP.FontAwesomeIcon.UserPlus);
                userType.AddEnumValue("UserTimes", global::FontAwesome.UWP.FontAwesomeIcon.UserTimes);
                userType.AddEnumValue("Bed", global::FontAwesome.UWP.FontAwesomeIcon.Bed);
                userType.AddEnumValue("Hotel", global::FontAwesome.UWP.FontAwesomeIcon.Hotel);
                userType.AddEnumValue("Viacoin", global::FontAwesome.UWP.FontAwesomeIcon.Viacoin);
                userType.AddEnumValue("Train", global::FontAwesome.UWP.FontAwesomeIcon.Train);
                userType.AddEnumValue("Subway", global::FontAwesome.UWP.FontAwesomeIcon.Subway);
                userType.AddEnumValue("Medium", global::FontAwesome.UWP.FontAwesomeIcon.Medium);
                userType.AddEnumValue("YCombinator", global::FontAwesome.UWP.FontAwesomeIcon.YCombinator);
                userType.AddEnumValue("Yc", global::FontAwesome.UWP.FontAwesomeIcon.Yc);
                userType.AddEnumValue("OptinMonster", global::FontAwesome.UWP.FontAwesomeIcon.OptinMonster);
                userType.AddEnumValue("Opencart", global::FontAwesome.UWP.FontAwesomeIcon.Opencart);
                userType.AddEnumValue("Expeditedssl", global::FontAwesome.UWP.FontAwesomeIcon.Expeditedssl);
                userType.AddEnumValue("BatteryFull", global::FontAwesome.UWP.FontAwesomeIcon.BatteryFull);
                userType.AddEnumValue("Battery4", global::FontAwesome.UWP.FontAwesomeIcon.Battery4);
                userType.AddEnumValue("Battery", global::FontAwesome.UWP.FontAwesomeIcon.Battery);
                userType.AddEnumValue("BatteryThreeQuarters", global::FontAwesome.UWP.FontAwesomeIcon.BatteryThreeQuarters);
                userType.AddEnumValue("Battery3", global::FontAwesome.UWP.FontAwesomeIcon.Battery3);
                userType.AddEnumValue("BatteryHalf", global::FontAwesome.UWP.FontAwesomeIcon.BatteryHalf);
                userType.AddEnumValue("Battery2", global::FontAwesome.UWP.FontAwesomeIcon.Battery2);
                userType.AddEnumValue("BatteryQuarter", global::FontAwesome.UWP.FontAwesomeIcon.BatteryQuarter);
                userType.AddEnumValue("Battery1", global::FontAwesome.UWP.FontAwesomeIcon.Battery1);
                userType.AddEnumValue("BatteryEmpty", global::FontAwesome.UWP.FontAwesomeIcon.BatteryEmpty);
                userType.AddEnumValue("Battery0", global::FontAwesome.UWP.FontAwesomeIcon.Battery0);
                userType.AddEnumValue("MousePointer", global::FontAwesome.UWP.FontAwesomeIcon.MousePointer);
                userType.AddEnumValue("ICursor", global::FontAwesome.UWP.FontAwesomeIcon.ICursor);
                userType.AddEnumValue("ObjectGroup", global::FontAwesome.UWP.FontAwesomeIcon.ObjectGroup);
                userType.AddEnumValue("ObjectUngroup", global::FontAwesome.UWP.FontAwesomeIcon.ObjectUngroup);
                userType.AddEnumValue("StickyNote", global::FontAwesome.UWP.FontAwesomeIcon.StickyNote);
                userType.AddEnumValue("StickyNoteOutline", global::FontAwesome.UWP.FontAwesomeIcon.StickyNoteOutline);
                userType.AddEnumValue("CcJcb", global::FontAwesome.UWP.FontAwesomeIcon.CcJcb);
                userType.AddEnumValue("CcDinersClub", global::FontAwesome.UWP.FontAwesomeIcon.CcDinersClub);
                userType.AddEnumValue("Clone", global::FontAwesome.UWP.FontAwesomeIcon.Clone);
                userType.AddEnumValue("BalanceScale", global::FontAwesome.UWP.FontAwesomeIcon.BalanceScale);
                userType.AddEnumValue("HourglassOutline", global::FontAwesome.UWP.FontAwesomeIcon.HourglassOutline);
                userType.AddEnumValue("HourglassStart", global::FontAwesome.UWP.FontAwesomeIcon.HourglassStart);
                userType.AddEnumValue("Hourglass1", global::FontAwesome.UWP.FontAwesomeIcon.Hourglass1);
                userType.AddEnumValue("HourglassHalf", global::FontAwesome.UWP.FontAwesomeIcon.HourglassHalf);
                userType.AddEnumValue("Hourglass2", global::FontAwesome.UWP.FontAwesomeIcon.Hourglass2);
                userType.AddEnumValue("HourglassEnd", global::FontAwesome.UWP.FontAwesomeIcon.HourglassEnd);
                userType.AddEnumValue("Hourglass3", global::FontAwesome.UWP.FontAwesomeIcon.Hourglass3);
                userType.AddEnumValue("Hourglass", global::FontAwesome.UWP.FontAwesomeIcon.Hourglass);
                userType.AddEnumValue("HandRockOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandRockOutline);
                userType.AddEnumValue("HandGrabOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandGrabOutline);
                userType.AddEnumValue("HandPaperOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandPaperOutline);
                userType.AddEnumValue("HandStopOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandStopOutline);
                userType.AddEnumValue("HandScissorsOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandScissorsOutline);
                userType.AddEnumValue("HandLizardOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandLizardOutline);
                userType.AddEnumValue("HandSpockOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandSpockOutline);
                userType.AddEnumValue("HandPointerOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandPointerOutline);
                userType.AddEnumValue("HandPeaceOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandPeaceOutline);
                userType.AddEnumValue("Trademark", global::FontAwesome.UWP.FontAwesomeIcon.Trademark);
                userType.AddEnumValue("Registered", global::FontAwesome.UWP.FontAwesomeIcon.Registered);
                userType.AddEnumValue("CreativeCommons", global::FontAwesome.UWP.FontAwesomeIcon.CreativeCommons);
                userType.AddEnumValue("Gg", global::FontAwesome.UWP.FontAwesomeIcon.Gg);
                userType.AddEnumValue("GgCircle", global::FontAwesome.UWP.FontAwesomeIcon.GgCircle);
                userType.AddEnumValue("Tripadvisor", global::FontAwesome.UWP.FontAwesomeIcon.Tripadvisor);
                userType.AddEnumValue("Odnoklassniki", global::FontAwesome.UWP.FontAwesomeIcon.Odnoklassniki);
                userType.AddEnumValue("OdnoklassnikiSquare", global::FontAwesome.UWP.FontAwesomeIcon.OdnoklassnikiSquare);
                userType.AddEnumValue("GetPocket", global::FontAwesome.UWP.FontAwesomeIcon.GetPocket);
                userType.AddEnumValue("WikipediaW", global::FontAwesome.UWP.FontAwesomeIcon.WikipediaW);
                userType.AddEnumValue("Safari", global::FontAwesome.UWP.FontAwesomeIcon.Safari);
                userType.AddEnumValue("Chrome", global::FontAwesome.UWP.FontAwesomeIcon.Chrome);
                userType.AddEnumValue("Firefox", global::FontAwesome.UWP.FontAwesomeIcon.Firefox);
                userType.AddEnumValue("Opera", global::FontAwesome.UWP.FontAwesomeIcon.Opera);
                userType.AddEnumValue("InternetExplorer", global::FontAwesome.UWP.FontAwesomeIcon.InternetExplorer);
                userType.AddEnumValue("Television", global::FontAwesome.UWP.FontAwesomeIcon.Television);
                userType.AddEnumValue("Tv", global::FontAwesome.UWP.FontAwesomeIcon.Tv);
                userType.AddEnumValue("Contao", global::FontAwesome.UWP.FontAwesomeIcon.Contao);
                userType.AddEnumValue("_500Px", global::FontAwesome.UWP.FontAwesomeIcon._500Px);
                userType.AddEnumValue("Amazon", global::FontAwesome.UWP.FontAwesomeIcon.Amazon);
                userType.AddEnumValue("CalendarPlusOutline", global::FontAwesome.UWP.FontAwesomeIcon.CalendarPlusOutline);
                userType.AddEnumValue("CalendarMinusOutline", global::FontAwesome.UWP.FontAwesomeIcon.CalendarMinusOutline);
                userType.AddEnumValue("CalendarTimesOutline", global::FontAwesome.UWP.FontAwesomeIcon.CalendarTimesOutline);
                userType.AddEnumValue("CalendarCheckOutline", global::FontAwesome.UWP.FontAwesomeIcon.CalendarCheckOutline);
                userType.AddEnumValue("Industry", global::FontAwesome.UWP.FontAwesomeIcon.Industry);
                userType.AddEnumValue("MapPin", global::FontAwesome.UWP.FontAwesomeIcon.MapPin);
                userType.AddEnumValue("MapSigns", global::FontAwesome.UWP.FontAwesomeIcon.MapSigns);
                userType.AddEnumValue("MapOutline", global::FontAwesome.UWP.FontAwesomeIcon.MapOutline);
                userType.AddEnumValue("Map", global::FontAwesome.UWP.FontAwesomeIcon.Map);
                userType.AddEnumValue("Commenting", global::FontAwesome.UWP.FontAwesomeIcon.Commenting);
                userType.AddEnumValue("CommentingOutline", global::FontAwesome.UWP.FontAwesomeIcon.CommentingOutline);
                userType.AddEnumValue("Houzz", global::FontAwesome.UWP.FontAwesomeIcon.Houzz);
                userType.AddEnumValue("Vimeo", global::FontAwesome.UWP.FontAwesomeIcon.Vimeo);
                userType.AddEnumValue("BlackTie", global::FontAwesome.UWP.FontAwesomeIcon.BlackTie);
                userType.AddEnumValue("Fonticons", global::FontAwesome.UWP.FontAwesomeIcon.Fonticons);
                userType.AddEnumValue("RedditAlien", global::FontAwesome.UWP.FontAwesomeIcon.RedditAlien);
                userType.AddEnumValue("Edge", global::FontAwesome.UWP.FontAwesomeIcon.Edge);
                userType.AddEnumValue("CreditCardAlt", global::FontAwesome.UWP.FontAwesomeIcon.CreditCardAlt);
                userType.AddEnumValue("Codiepie", global::FontAwesome.UWP.FontAwesomeIcon.Codiepie);
                userType.AddEnumValue("Modx", global::FontAwesome.UWP.FontAwesomeIcon.Modx);
                userType.AddEnumValue("FortAwesome", global::FontAwesome.UWP.FontAwesomeIcon.FortAwesome);
                userType.AddEnumValue("Usb", global::FontAwesome.UWP.FontAwesomeIcon.Usb);
                userType.AddEnumValue("ProductHunt", global::FontAwesome.UWP.FontAwesomeIcon.ProductHunt);
                userType.AddEnumValue("Mixcloud", global::FontAwesome.UWP.FontAwesomeIcon.Mixcloud);
                userType.AddEnumValue("Scribd", global::FontAwesome.UWP.FontAwesomeIcon.Scribd);
                userType.AddEnumValue("PauseCircle", global::FontAwesome.UWP.FontAwesomeIcon.PauseCircle);
                userType.AddEnumValue("PauseCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.PauseCircleOutline);
                userType.AddEnumValue("StopCircle", global::FontAwesome.UWP.FontAwesomeIcon.StopCircle);
                userType.AddEnumValue("StopCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.StopCircleOutline);
                userType.AddEnumValue("ShoppingBag", global::FontAwesome.UWP.FontAwesomeIcon.ShoppingBag);
                userType.AddEnumValue("ShoppingBasket", global::FontAwesome.UWP.FontAwesomeIcon.ShoppingBasket);
                userType.AddEnumValue("Hashtag", global::FontAwesome.UWP.FontAwesomeIcon.Hashtag);
                userType.AddEnumValue("Bluetooth", global::FontAwesome.UWP.FontAwesomeIcon.Bluetooth);
                userType.AddEnumValue("BluetoothB", global::FontAwesome.UWP.FontAwesomeIcon.BluetoothB);
                userType.AddEnumValue("Percent", global::FontAwesome.UWP.FontAwesomeIcon.Percent);
                userType.AddEnumValue("Gitlab", global::FontAwesome.UWP.FontAwesomeIcon.Gitlab);
                userType.AddEnumValue("Wpbeginner", global::FontAwesome.UWP.FontAwesomeIcon.Wpbeginner);
                userType.AddEnumValue("Wpforms", global::FontAwesome.UWP.FontAwesomeIcon.Wpforms);
                userType.AddEnumValue("Envira", global::FontAwesome.UWP.FontAwesomeIcon.Envira);
                userType.AddEnumValue("UniversalAccess", global::FontAwesome.UWP.FontAwesomeIcon.UniversalAccess);
                userType.AddEnumValue("WheelchairAlt", global::FontAwesome.UWP.FontAwesomeIcon.WheelchairAlt);
                userType.AddEnumValue("QuestionCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.QuestionCircleOutline);
                userType.AddEnumValue("Blind", global::FontAwesome.UWP.FontAwesomeIcon.Blind);
                userType.AddEnumValue("AudioDescription", global::FontAwesome.UWP.FontAwesomeIcon.AudioDescription);
                userType.AddEnumValue("VolumeControlPhone", global::FontAwesome.UWP.FontAwesomeIcon.VolumeControlPhone);
                userType.AddEnumValue("Braille", global::FontAwesome.UWP.FontAwesomeIcon.Braille);
                userType.AddEnumValue("AssistiveListeningSystems", global::FontAwesome.UWP.FontAwesomeIcon.AssistiveListeningSystems);
                userType.AddEnumValue("AmericanSignLanguageInterpreting", global::FontAwesome.UWP.FontAwesomeIcon.AmericanSignLanguageInterpreting);
                userType.AddEnumValue("AslInterpreting", global::FontAwesome.UWP.FontAwesomeIcon.AslInterpreting);
                userType.AddEnumValue("Deaf", global::FontAwesome.UWP.FontAwesomeIcon.Deaf);
                userType.AddEnumValue("Deafness", global::FontAwesome.UWP.FontAwesomeIcon.Deafness);
                userType.AddEnumValue("HardOfHearing", global::FontAwesome.UWP.FontAwesomeIcon.HardOfHearing);
                userType.AddEnumValue("Glide", global::FontAwesome.UWP.FontAwesomeIcon.Glide);
                userType.AddEnumValue("GlideG", global::FontAwesome.UWP.FontAwesomeIcon.GlideG);
                userType.AddEnumValue("SignLanguage", global::FontAwesome.UWP.FontAwesomeIcon.SignLanguage);
                userType.AddEnumValue("Signing", global::FontAwesome.UWP.FontAwesomeIcon.Signing);
                userType.AddEnumValue("LowVision", global::FontAwesome.UWP.FontAwesomeIcon.LowVision);
                userType.AddEnumValue("Viadeo", global::FontAwesome.UWP.FontAwesomeIcon.Viadeo);
                userType.AddEnumValue("ViadeoSquare", global::FontAwesome.UWP.FontAwesomeIcon.ViadeoSquare);
                userType.AddEnumValue("Snapchat", global::FontAwesome.UWP.FontAwesomeIcon.Snapchat);
                userType.AddEnumValue("SnapchatGhost", global::FontAwesome.UWP.FontAwesomeIcon.SnapchatGhost);
                userType.AddEnumValue("SnapchatSquare", global::FontAwesome.UWP.FontAwesomeIcon.SnapchatSquare);
                userType.AddEnumValue("PiedPiper", global::FontAwesome.UWP.FontAwesomeIcon.PiedPiper);
                userType.AddEnumValue("FirstOrder", global::FontAwesome.UWP.FontAwesomeIcon.FirstOrder);
                userType.AddEnumValue("Yoast", global::FontAwesome.UWP.FontAwesomeIcon.Yoast);
                userType.AddEnumValue("Themeisle", global::FontAwesome.UWP.FontAwesomeIcon.Themeisle);
                userType.AddEnumValue("GooglePlusOfficial", global::FontAwesome.UWP.FontAwesomeIcon.GooglePlusOfficial);
                userType.AddEnumValue("GooglePlusCircle", global::FontAwesome.UWP.FontAwesomeIcon.GooglePlusCircle);
                userType.AddEnumValue("FontAwesome", global::FontAwesome.UWP.FontAwesomeIcon.FontAwesome);
                userType.AddEnumValue("Fa", global::FontAwesome.UWP.FontAwesomeIcon.Fa);
                userType.AddEnumValue("HandshakeOutline", global::FontAwesome.UWP.FontAwesomeIcon.HandshakeOutline);
                userType.AddEnumValue("EnvelopeOpen", global::FontAwesome.UWP.FontAwesomeIcon.EnvelopeOpen);
                userType.AddEnumValue("EnvelopeOutlinepenOutline", global::FontAwesome.UWP.FontAwesomeIcon.EnvelopeOutlinepenOutline);
                userType.AddEnumValue("Linode", global::FontAwesome.UWP.FontAwesomeIcon.Linode);
                userType.AddEnumValue("AddressBook", global::FontAwesome.UWP.FontAwesomeIcon.AddressBook);
                userType.AddEnumValue("AddressBookOutline", global::FontAwesome.UWP.FontAwesomeIcon.AddressBookOutline);
                userType.AddEnumValue("AddressCard", global::FontAwesome.UWP.FontAwesomeIcon.AddressCard);
                userType.AddEnumValue("Vcard", global::FontAwesome.UWP.FontAwesomeIcon.Vcard);
                userType.AddEnumValue("AddressCardOutline", global::FontAwesome.UWP.FontAwesomeIcon.AddressCardOutline);
                userType.AddEnumValue("VcardOutline", global::FontAwesome.UWP.FontAwesomeIcon.VcardOutline);
                userType.AddEnumValue("UserCircle", global::FontAwesome.UWP.FontAwesomeIcon.UserCircle);
                userType.AddEnumValue("UserCircleOutline", global::FontAwesome.UWP.FontAwesomeIcon.UserCircleOutline);
                userType.AddEnumValue("UserOutline", global::FontAwesome.UWP.FontAwesomeIcon.UserOutline);
                userType.AddEnumValue("IdBadge", global::FontAwesome.UWP.FontAwesomeIcon.IdBadge);
                userType.AddEnumValue("IdCard", global::FontAwesome.UWP.FontAwesomeIcon.IdCard);
                userType.AddEnumValue("DriversLicense", global::FontAwesome.UWP.FontAwesomeIcon.DriversLicense);
                userType.AddEnumValue("IdCardOutline", global::FontAwesome.UWP.FontAwesomeIcon.IdCardOutline);
                userType.AddEnumValue("DriversLicenseOutline", global::FontAwesome.UWP.FontAwesomeIcon.DriversLicenseOutline);
                userType.AddEnumValue("Quora", global::FontAwesome.UWP.FontAwesomeIcon.Quora);
                userType.AddEnumValue("FreeCodeCamp", global::FontAwesome.UWP.FontAwesomeIcon.FreeCodeCamp);
                userType.AddEnumValue("Telegram", global::FontAwesome.UWP.FontAwesomeIcon.Telegram);
                userType.AddEnumValue("ThermometerFull", global::FontAwesome.UWP.FontAwesomeIcon.ThermometerFull);
                userType.AddEnumValue("Thermometer4", global::FontAwesome.UWP.FontAwesomeIcon.Thermometer4);
                userType.AddEnumValue("Thermometer", global::FontAwesome.UWP.FontAwesomeIcon.Thermometer);
                userType.AddEnumValue("ThermometerThreeQuarters", global::FontAwesome.UWP.FontAwesomeIcon.ThermometerThreeQuarters);
                userType.AddEnumValue("Thermometer3", global::FontAwesome.UWP.FontAwesomeIcon.Thermometer3);
                userType.AddEnumValue("ThermometerHalf", global::FontAwesome.UWP.FontAwesomeIcon.ThermometerHalf);
                userType.AddEnumValue("Thermometer2", global::FontAwesome.UWP.FontAwesomeIcon.Thermometer2);
                userType.AddEnumValue("ThermometerQuarter", global::FontAwesome.UWP.FontAwesomeIcon.ThermometerQuarter);
                userType.AddEnumValue("Thermometer1", global::FontAwesome.UWP.FontAwesomeIcon.Thermometer1);
                userType.AddEnumValue("ThermometerEmpty", global::FontAwesome.UWP.FontAwesomeIcon.ThermometerEmpty);
                userType.AddEnumValue("Thermometer0", global::FontAwesome.UWP.FontAwesomeIcon.Thermometer0);
                userType.AddEnumValue("Shower", global::FontAwesome.UWP.FontAwesomeIcon.Shower);
                userType.AddEnumValue("Bath", global::FontAwesome.UWP.FontAwesomeIcon.Bath);
                userType.AddEnumValue("Bathtub", global::FontAwesome.UWP.FontAwesomeIcon.Bathtub);
                userType.AddEnumValue("S15", global::FontAwesome.UWP.FontAwesomeIcon.S15);
                userType.AddEnumValue("Podcast", global::FontAwesome.UWP.FontAwesomeIcon.Podcast);
                userType.AddEnumValue("WindowMaximize", global::FontAwesome.UWP.FontAwesomeIcon.WindowMaximize);
                userType.AddEnumValue("WindowMinimize", global::FontAwesome.UWP.FontAwesomeIcon.WindowMinimize);
                userType.AddEnumValue("WindowRestore", global::FontAwesome.UWP.FontAwesomeIcon.WindowRestore);
                userType.AddEnumValue("WindowClose", global::FontAwesome.UWP.FontAwesomeIcon.WindowClose);
                userType.AddEnumValue("TimesRectangle", global::FontAwesome.UWP.FontAwesomeIcon.TimesRectangle);
                userType.AddEnumValue("WindowCloseOutline", global::FontAwesome.UWP.FontAwesomeIcon.WindowCloseOutline);
                userType.AddEnumValue("TimesRectangleOutline", global::FontAwesome.UWP.FontAwesomeIcon.TimesRectangleOutline);
                userType.AddEnumValue("Bandcamp", global::FontAwesome.UWP.FontAwesomeIcon.Bandcamp);
                userType.AddEnumValue("Grav", global::FontAwesome.UWP.FontAwesomeIcon.Grav);
                userType.AddEnumValue("Etsy", global::FontAwesome.UWP.FontAwesomeIcon.Etsy);
                userType.AddEnumValue("Imdb", global::FontAwesome.UWP.FontAwesomeIcon.Imdb);
                userType.AddEnumValue("Ravelry", global::FontAwesome.UWP.FontAwesomeIcon.Ravelry);
                userType.AddEnumValue("Eercast", global::FontAwesome.UWP.FontAwesomeIcon.Eercast);
                userType.AddEnumValue("Microchip", global::FontAwesome.UWP.FontAwesomeIcon.Microchip);
                userType.AddEnumValue("SnowflakeOutline", global::FontAwesome.UWP.FontAwesomeIcon.SnowflakeOutline);
                userType.AddEnumValue("Superpowers", global::FontAwesome.UWP.FontAwesomeIcon.Superpowers);
                userType.AddEnumValue("Wpexplorer", global::FontAwesome.UWP.FontAwesomeIcon.Wpexplorer);
                userType.AddEnumValue("Meetup", global::FontAwesome.UWP.FontAwesomeIcon.Meetup);
                xamlType = userType;
                break;

            case 3:   //  System.Enum
                userType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 4:   //  System.ValueType
                userType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 5:   //  Object
                xamlType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  WebCamApp.MainPage
                userType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }


        private object get_0_FontAwesome_Icon(object instance)
        {
            var that = (global::FontAwesome.UWP.FontAwesome)instance;
            return that.Icon;
        }
        private void set_0_FontAwesome_Icon(object instance, object Value)
        {
            var that = (global::FontAwesome.UWP.FontAwesome)instance;
            that.Icon = (global::FontAwesome.UWP.FontAwesomeIcon)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::WebCamApp.WebCamApp_XamlTypeInfo.XamlMember xamlMember = null;
            global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "FontAwesome.UWP.FontAwesome.Icon":
                userType = (global::WebCamApp.WebCamApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FontAwesome.UWP.FontAwesome");
                xamlMember = new global::WebCamApp.WebCamApp_XamlTypeInfo.XamlMember(this, "Icon", "FontAwesome.UWP.FontAwesomeIcon");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_FontAwesome_Icon;
                xamlMember.Setter = set_0_FontAwesome_Icon;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::WebCamApp.WebCamApp_XamlTypeInfo.XamlSystemBaseType
    {
        global::WebCamApp.WebCamApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::WebCamApp.WebCamApp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::WebCamApp.WebCamApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::WebCamApp.WebCamApp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

